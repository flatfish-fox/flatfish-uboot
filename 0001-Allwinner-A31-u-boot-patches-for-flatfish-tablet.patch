From 1ccc496eab742060bf8a674fd1575eb1b6a35913 Mon Sep 17 00:00:00 2001
From: Flatfish <flatfish.fox@gmail.com>
Date: Mon, 17 Feb 2014 18:57:40 +0800
Subject: [PATCH] Allwinner A31 u-boot patches for flatfish tablet

---
 arch/arm/cpu/armv7/sunxi/fastboot.c |    2 +
 common/cmd_mem.c                    |  160 ++++++++++++++++-------------------
 drivers/mmc/mmc.c                   |    3 +-
 drivers/mmc/sunxi_mmc.c             |   13 +--
 include/configs/sun6i.h             |    3 +-
 5 files changed, 89 insertions(+), 92 deletions(-)

diff --git a/arch/arm/cpu/armv7/sunxi/fastboot.c b/arch/arm/cpu/armv7/sunxi/fastboot.c
index a64f899..18df136 100644
--- a/arch/arm/cpu/armv7/sunxi/fastboot.c
+++ b/arch/arm/cpu/armv7/sunxi/fastboot.c
@@ -1102,6 +1102,8 @@ static int fastboot_rx(void)
 		int fifo_size = fastboot_fifo_size();
 
 		fifoCnt = USBC_ReadLenFromFifo(udc.bsp, USBC_EP_TYPE_RX);
+
+		memset( rxBuf, 0, BULK_FIFOSIZE );
 		USBC_ReadPacket(udc.bsp, fifoAddr, fifoCnt, rxBuf);
 
         if(fifoCnt > fifo_size){
diff --git a/common/cmd_mem.c b/common/cmd_mem.c
index 4daa1b3..a8c1de8 100644
--- a/common/cmd_mem.c
+++ b/common/cmd_mem.c
@@ -34,6 +34,7 @@
 #endif
 #include <watchdog.h>
 
+//#define CMD_MEM_DEBUG
 #ifdef	CMD_MEM_DEBUG
 #define	PRINTF(fmt,args...)	printf (fmt ,##args)
 #else
@@ -623,8 +624,8 @@ int do_mem_mtest (cmd_tbl_t *cmdtp, int flag, int argc, char * const argv[])
 	ulong	errs = 0;
 	int iterations = 1;
 	int iteration_limit;
+	char mode;
 
-#if defined(CONFIG_SYS_ALT_MEMTEST)
 	vu_long	len;
 	vu_long	offset;
 	vu_long	test_offset;
@@ -639,7 +640,21 @@ int do_mem_mtest (cmd_tbl_t *cmdtp, int flag, int argc, char * const argv[])
 #endif
 	int	j;
 
-	static const ulong bitpattern[] = {
+	ulong	incr;
+	ulong	pattern_b;
+	int i;
+
+	ulong bitpattern[] = {
+		0x00000000,	
+		0x11111111,	
+		0xFFFFFFFF,	
+		0x55555555,	
+		0x05050505,	
+		0x0A0A0A0A,	
+		0x0F0F0F0F,	
+		0xaaaaaaaa,	
+	};
+	ulong bitpattern_a[] = {
 		0x00000001,	/* single bit */
 		0x00000003,	/* two adjacent bits */
 		0x00000007,	/* three adjacent bits */
@@ -649,35 +664,37 @@ int do_mem_mtest (cmd_tbl_t *cmdtp, int flag, int argc, char * const argv[])
 		0x00000055,	/* four non-adjacent bits */
 		0xaaaaaaaa,	/* alternating 1/0 */
 	};
-#else
-	ulong	incr;
-	ulong	pattern;
-#endif
+	if (argc < 2){
+		cmd_usage(cmdtp);
+		return -1;
+	}
 
-	if (argc > 1)
-		start = (ulong *)simple_strtoul(argv[1], NULL, 16);
-	else
-		start = (ulong *)CONFIG_SYS_MEMTEST_START;
 
 	if (argc > 2)
-		end = (ulong *)simple_strtoul(argv[2], NULL, 16);
+		start = (ulong *)simple_strtoul(argv[2], NULL, 16);
 	else
-		end = (ulong *)(CONFIG_SYS_MEMTEST_END);
+		start = (ulong *)CONFIG_SYS_MEMTEST_START;
 
 	if (argc > 3)
-		pattern = (ulong)simple_strtoul(argv[3], NULL, 16);
+		end = (ulong *)simple_strtoul(argv[3], NULL, 16);
 	else
-		pattern = 0;
+		end = (ulong *)CONFIG_SYS_MEMTEST_END ;
 
 	if (argc > 4)
-		iteration_limit = (ulong)simple_strtoul(argv[4], NULL, 16);
+		pattern_b = (ulong)simple_strtoul(argv[4], NULL, 16);
+	else
+		pattern_b = 0;
+
+	if (argc > 5)
+		iteration_limit = (ulong)simple_strtoul(argv[5], NULL, 16);
 	else
-		iteration_limit = 0;
+		iteration_limit = iterations;
+
+	printf("Test mode is %c\n", *argv[1]);
+	switch(*argv[1]){
+	case 'a':
 
-#if defined(CONFIG_SYS_ALT_MEMTEST)
 	printf ("Testing %08x ... %08x:\n", (uint)start, (uint)end);
-	PRINTF("%s:%d: start 0x%p end 0x%p\n",
-		__FUNCTION__, __LINE__, start, end);
 
 	for (;;) {
 		if (ctrlc()) {
@@ -714,8 +731,8 @@ int do_mem_mtest (cmd_tbl_t *cmdtp, int flag, int argc, char * const argv[])
 		 * pattern and ~pattern).
 		 */
 		addr = start;
-		for (j = 0; j < sizeof(bitpattern)/sizeof(bitpattern[0]); j++) {
-		    val = bitpattern[j];
+		for (j = 0; j < sizeof(bitpattern_a)/sizeof(bitpattern_a[0]); j++) {
+		    val = bitpattern_a[j];
 		    for(; val != 0; val <<= 1) {
 			*addr  = val;
 			*dummy  = ~val; /* clear the test data off of the bus */
@@ -743,8 +760,8 @@ int do_mem_mtest (cmd_tbl_t *cmdtp, int flag, int argc, char * const argv[])
 				return 1;
 			    }
 			}
-		    }
-		}
+	  	}
+	}
 
 		/*
 		 * Based on code whose Original Author and Copyright
@@ -784,9 +801,6 @@ int do_mem_mtest (cmd_tbl_t *cmdtp, int flag, int argc, char * const argv[])
 		pattern = (vu_long) 0xaaaaaaaa;
 		anti_pattern = (vu_long) 0x55555555;
 
-		PRINTF("%s:%d: length = 0x%.8lx\n",
-			__FUNCTION__, __LINE__,
-			len);
 		/*
 		 * Write the default pattern at each of the
 		 * power-of-two offsets.
@@ -902,66 +916,42 @@ int do_mem_mtest (cmd_tbl_t *cmdtp, int flag, int argc, char * const argv[])
 		    start[offset] = 0;
 		}
 	}
-
-#else /* The original, quickie test */
-	incr = 1;
-	for (;;) {
-		if (ctrlc()) {
-			putc ('\n');
-			return 1;
-		}
-
-		if (iteration_limit && iterations > iteration_limit) {
-			printf("Tested %d iteration(s) with %lu errors.\n",
-				iterations-1, errs);
-			return errs != 0;
-		}
-		++iterations;
-
-		printf ("\rPattern %08lX  Writing..."
-			"%12s"
-			"\b\b\b\b\b\b\b\b\b\b",
-			pattern, "");
-
-		for (addr=start,val=pattern; addr<end; addr++) {
-			WATCHDOG_RESET();
-			*addr = val;
-			val  += incr;
-		}
-
-		puts ("Reading...");
-
-		for (addr=start,val=pattern; addr<end; addr++) {
-			WATCHDOG_RESET();
-			readback = *addr;
-			if (readback != val) {
-				printf ("\nMem error @ 0x%08X: "
-					"found %08lX, expected %08lX\n",
-					(uint)addr, readback, val);
-				errs++;
-				if (ctrlc()) {
-					putc ('\n');
-					return 1;
+	break;
+
+	case 'b': /* The original, quickie test */
+
+	for(;iterations <= iteration_limit; iterations++){
+		printf("Iterations:\t%d\n", iterations);
+		for(i=0; i<sizeof(bitpattern)/sizeof(bitpattern[0]);i++){
+				pattern_b = bitpattern[i];
+				printf("Test pattern 0x%.8x Writing...\t", pattern_b);
+				addr = start;
+				printf("start 0x%.8x, end 0x%.8x\n",addr, end);
+				for(addr=start; addr<end; addr++){
+//						WATCHDOG_RESET();
+						*addr = pattern_b;
+						printf("addr 0x%.8x content%.8x\n", addr, *addr);
 				}
-			}
-			val += incr;
-		}
 
-		/*
-		 * Flip the pattern each time to make lots of zeros and
-		 * then, the next time, lots of ones.  We decrement
-		 * the "negative" patterns and increment the "positive"
-		 * patterns to preserve this feature.
-		 */
-		if(pattern & 0x80000000) {
-			pattern = -pattern;	/* complement & increment */
-		}
-		else {
-			pattern = ~pattern;
+				printf("Reading...\n");
+											
+				for(addr=start; addr<end; addr++){
+//						WATCHDOG_RESET();
+						readback = *addr;
+		//				printf("readback 0x%.8lx\n", readback);
+						if(readback != pattern_b){
+							errs++;
+							printf("\nFailure, writing 0x%.8lx, readback 0x%.8lx", pattern_b, readback);
+						}
+				}
 		}
-		incr = -incr;
 	}
-#endif
+	break;
+	default:
+		printf("Mode should be 'a' or 'b'\n");
+		break;
+	}
+
 	return 0;	/* not reached */
 }
 
@@ -1246,9 +1236,9 @@ U_BOOT_CMD(
 #endif /* CONFIG_LOOPW */
 
 U_BOOT_CMD(
-	mtest,	5,	1,	do_mem_mtest,
-	"simple RAM read/write test",
-	"[start [end [pattern [iterations]]]]"
+	mtest,	6,	1,	do_mem_mtest,
+	"simple RAM read/write test, must choose a or b as a test mode",
+	"a/b [start [end [pattern [iterations]]]]"
 );
 
 #ifdef CONFIG_MX_CYCLIC
diff --git a/drivers/mmc/mmc.c b/drivers/mmc/mmc.c
index 843194f..9a170b7 100755
--- a/drivers/mmc/mmc.c
+++ b/drivers/mmc/mmc.c
@@ -630,7 +630,8 @@ int mmc_change_freq(struct mmc *mmc)
 	if (mmc->version < MMC_VERSION_4)
 		return 0;
 
-	mmc->card_caps |= MMC_MODE_4BIT;
+//	mmc->card_caps |= MMC_MODE_4BIT;
+	mmc->card_caps |= ((mmc->host_caps & MMC_MODE_8BIT) ? MMC_MODE_8BIT : MMC_MODE_4BIT);
 
 	err = mmc_send_ext_csd(mmc, ext_csd);
 
diff --git a/drivers/mmc/sunxi_mmc.c b/drivers/mmc/sunxi_mmc.c
index 12440af..7862229 100755
--- a/drivers/mmc/sunxi_mmc.c
+++ b/drivers/mmc/sunxi_mmc.c
@@ -186,9 +186,9 @@ static int mmc_clk_io_on(int sdc_no)
         case 2:
             /* CMD-PC6, CLK-PC7, D0-PC8, D1-PC9, D2-PC10, D3-PC11 */
             writel(0x33000000, gpioc_base + 0x0);
-            writel(0x3333, gpioc_base + 0x4);
-            writel(0x555 << 12, gpioc_base + 0x1c);
-            writel(0xaaa << 12, gpioc_base + 0x14);
+            writel(0x33333333, gpioc_base + 0x4);
+            writel(0x55555 << 12, gpioc_base + 0x1c);
+            writel(0xaaaaa << 12, gpioc_base + 0x14);
             break;
         default:
             return -1;
@@ -620,9 +620,9 @@ int sunxi_mmc_init(int sdc_no)
 	mmc->set_ios = mmc_set_ios;
 	mmc->init = mmc_core_init;
 
-	mmc->voltages = MMC_VDD_32_33 | MMC_VDD_33_34;
+	mmc->voltages = MMC_VDD_28_29| MMC_VDD_29_30 | MMC_VDD_31_32 |MMC_VDD_32_33 | MMC_VDD_33_34;
 	mmc->host_caps = MMC_MODE_4BIT;
-	mmc->host_caps |= MMC_MODE_HS_52MHz | MMC_MODE_HS;
+	mmc->host_caps |= MMC_MODE_HS_52MHz | MMC_MODE_HS | MMC_MODE_HC;
 
 	mmc->f_min = 400000;
 	mmc->f_max = 52000000;
@@ -633,5 +633,8 @@ int sunxi_mmc_init(int sdc_no)
 
 	mmc_register(mmc);
 
+	if(sdc_no == 2)
+		mmc->host_caps |= MMC_MODE_8BIT;
+
 	return 0;
 }
diff --git a/include/configs/sun6i.h b/include/configs/sun6i.h
index 1fdab59..946b3d3 100755
--- a/include/configs/sun6i.h
+++ b/include/configs/sun6i.h
@@ -141,8 +141,9 @@
 #define CONFIG_SYS_BARGSIZE			CONFIG_SYS_CBSIZE
 
 /* memtest works on */
+#define CONFIG_SYS_ALT_MEMTEST			1
 #define CONFIG_SYS_MEMTEST_START	CONFIG_SYS_SDRAM_BASE
-#define CONFIG_SYS_MEMTEST_END		(CONFIG_SYS_SDRAM_BASE + 256<<20)	/* 256M */
+#define CONFIG_SYS_MEMTEST_END		(CONFIG_SYS_SDRAM_BASE + (1<<28))	/* 256M */
 #define CONFIG_SYS_LOAD_ADDR		0x50000000					/* default load address */
 
 #define CONFIG_SYS_HZ				1000
-- 
1.7.10.4

